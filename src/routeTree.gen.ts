/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NewImport } from './routes/new'
import { Route as IndexImport } from './routes/index'
import { Route as testTestImport } from './routes/(test)/test_'
import { Route as testTestAImport } from './routes/(test)/test.a_'
import { Route as testTestASomethingImport } from './routes/(test)/test.a.something'
import { Route as testTestABImport } from './routes/(test)/test.a.b_'
import { Route as testTestABCImport } from './routes/(test)/test.a.b.c'

// Create/Update Routes

const NewRoute = NewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const testTestRoute = testTestImport.update({
  id: '/(test)/test_',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const testTestARoute = testTestAImport.update({
  id: '/(test)/test/a_',
  path: '/test/a',
  getParentRoute: () => rootRoute,
} as any)

const testTestASomethingRoute = testTestASomethingImport.update({
  id: '/(test)/test/a/something',
  path: '/test/a/something',
  getParentRoute: () => rootRoute,
} as any)

const testTestABRoute = testTestABImport.update({
  id: '/(test)/test/a/b_',
  path: '/test/a/b',
  getParentRoute: () => rootRoute,
} as any)

const testTestABCRoute = testTestABCImport.update({
  id: '/(test)/test/a/b/c',
  path: '/test/a/b/c',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewImport
      parentRoute: typeof rootRoute
    }
    '/(test)/test_': {
      id: '/(test)/test_'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof testTestImport
      parentRoute: typeof rootRoute
    }
    '/(test)/test/a_': {
      id: '/(test)/test/a_'
      path: '/test/a'
      fullPath: '/test/a'
      preLoaderRoute: typeof testTestAImport
      parentRoute: typeof rootRoute
    }
    '/(test)/test/a/b_': {
      id: '/(test)/test/a/b_'
      path: '/test/a/b'
      fullPath: '/test/a/b'
      preLoaderRoute: typeof testTestABImport
      parentRoute: typeof rootRoute
    }
    '/(test)/test/a/something': {
      id: '/(test)/test/a/something'
      path: '/test/a/something'
      fullPath: '/test/a/something'
      preLoaderRoute: typeof testTestASomethingImport
      parentRoute: typeof rootRoute
    }
    '/(test)/test/a/b/c': {
      id: '/(test)/test/a/b/c'
      path: '/test/a/b/c'
      fullPath: '/test/a/b/c'
      preLoaderRoute: typeof testTestABCImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/new': typeof NewRoute
  '/test': typeof testTestRoute
  '/test/a': typeof testTestARoute
  '/test/a/b': typeof testTestABRoute
  '/test/a/something': typeof testTestASomethingRoute
  '/test/a/b/c': typeof testTestABCRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/new': typeof NewRoute
  '/test': typeof testTestRoute
  '/test/a': typeof testTestARoute
  '/test/a/b': typeof testTestABRoute
  '/test/a/something': typeof testTestASomethingRoute
  '/test/a/b/c': typeof testTestABCRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/new': typeof NewRoute
  '/(test)/test_': typeof testTestRoute
  '/(test)/test/a_': typeof testTestARoute
  '/(test)/test/a/b_': typeof testTestABRoute
  '/(test)/test/a/something': typeof testTestASomethingRoute
  '/(test)/test/a/b/c': typeof testTestABCRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/new'
    | '/test'
    | '/test/a'
    | '/test/a/b'
    | '/test/a/something'
    | '/test/a/b/c'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/new'
    | '/test'
    | '/test/a'
    | '/test/a/b'
    | '/test/a/something'
    | '/test/a/b/c'
  id:
    | '__root__'
    | '/'
    | '/new'
    | '/(test)/test_'
    | '/(test)/test/a_'
    | '/(test)/test/a/b_'
    | '/(test)/test/a/something'
    | '/(test)/test/a/b/c'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NewRoute: typeof NewRoute
  testTestRoute: typeof testTestRoute
  testTestARoute: typeof testTestARoute
  testTestABRoute: typeof testTestABRoute
  testTestASomethingRoute: typeof testTestASomethingRoute
  testTestABCRoute: typeof testTestABCRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NewRoute: NewRoute,
  testTestRoute: testTestRoute,
  testTestARoute: testTestARoute,
  testTestABRoute: testTestABRoute,
  testTestASomethingRoute: testTestASomethingRoute,
  testTestABCRoute: testTestABCRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/new",
        "/(test)/test_",
        "/(test)/test/a_",
        "/(test)/test/a/b_",
        "/(test)/test/a/something",
        "/(test)/test/a/b/c"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/new": {
      "filePath": "new.tsx"
    },
    "/(test)/test_": {
      "filePath": "(test)/test_.tsx"
    },
    "/(test)/test/a_": {
      "filePath": "(test)/test.a_.tsx"
    },
    "/(test)/test/a/b_": {
      "filePath": "(test)/test.a.b_.tsx"
    },
    "/(test)/test/a/something": {
      "filePath": "(test)/test.a.something.tsx"
    },
    "/(test)/test/a/b/c": {
      "filePath": "(test)/test.a.b.c.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
